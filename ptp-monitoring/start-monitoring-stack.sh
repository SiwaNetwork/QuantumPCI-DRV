#!/bin/bash
# start-monitoring-stack.sh - –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ TimeCard

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    
    # Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    print_success "Docker –Ω–∞–π–¥–µ–Ω"
    
    # Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    print_success "Docker Compose –Ω–∞–π–¥–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    local ports=(3000 8080 9090 9091 9093 9100 9009)
    for port in "${ports[@]}"; do
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            print_warning "–ü–æ—Ä—Ç $port —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
        fi
    done
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_header "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
    
    mkdir -p config/grafana/dashboards
    mkdir -p config/grafana/provisioning/datasources
    mkdir -p config/grafana/provisioning/dashboards
    mkdir -p data/prometheus
    mkdir -p data/grafana
    mkdir -p data/alertmanager
    mkdir -p data/victoria
    
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python
install_python_deps() {
    print_header "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python"
    
    if [[ "$VIRTUAL_ENV" == "" ]]; then
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        python3 -m venv venv
        source venv/bin/activate
    fi
    
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
    pip install --break-system-packages -r requirements.txt
    
    print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ —Å –ø–æ–º–æ—â—å—é Docker Compose
start_with_docker() {
    print_header "–ó–∞–ø—É—Å–∫ —Å Docker Compose"
    
    print_info "–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose up -d --build
    
    print_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose ps
    
    print_success "Docker Compose –∑–∞–ø—É—â–µ–Ω"
}

# –ó–∞–ø—É—Å–∫ –≤ development —Ä–µ–∂–∏–º–µ
start_development() {
    print_header "–ó–∞–ø—É—Å–∫ –≤ Development —Ä–µ–∂–∏–º–µ"
    
    install_python_deps
    
    print_info "–ó–∞–ø—É—Å–∫ TimeCard API..."
    python demo-extended.py &
    API_PID=$!
    
    print_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ API..."
    sleep 10
    
    print_info "–ó–∞–ø—É—Å–∫ Prometheus Exporter..."
    python api/prometheus-exporter.py &
    EXPORTER_PID=$!
    
    print_success "Development —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
    print_info "API PID: $API_PID"
    print_info "Exporter PID: $EXPORTER_PID"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PID –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    echo $API_PID > .api.pid
    echo $EXPORTER_PID > .exporter.pid
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ development —Å–µ—Ä–≤–∏—Å–æ–≤
stop_development() {
    print_header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Development —Å–µ—Ä–≤–∏—Å–æ–≤"
    
    if [[ -f .api.pid ]]; then
        API_PID=$(cat .api.pid)
        if kill -0 $API_PID 2>/dev/null; then
            kill $API_PID
            print_success "API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
        rm .api.pid
    fi
    
    if [[ -f .exporter.pid ]]; then
        EXPORTER_PID=$(cat .exporter.pid)
        if kill -0 $EXPORTER_PID 2>/dev/null; then
            kill $EXPORTER_PID
            print_success "Exporter –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
        rm .exporter.pid
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
check_services() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
    
    local services=(
        "TimeCard API:http://localhost:8080/api/health"
        "TimeCard Dashboard:http://localhost:8080"
        "Prometheus Exporter:http://localhost:9090/metrics"
        "Prometheus:http://localhost:9091"
        "Grafana:http://localhost:3000"
        "AlertManager:http://localhost:9093"
    )
    
    for service in "${services[@]}"; do
        IFS=':' read -ra ADDR <<< "$service"
        name="${ADDR[0]}"
        url="${ADDR[1]}:${ADDR[2]}"
        
        if curl -s --max-time 5 "$url" > /dev/null 2>&1; then
            print_success "$name –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            print_warning "$name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ($url)"
        fi
    done
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
view_logs() {
    print_header "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    
    if [[ "$1" == "docker" ]]; then
        docker-compose logs -f
    else
        print_info "–õ–æ–≥–∏ Development —Ä–µ–∂–∏–º–∞:"
        if [[ -f .api.pid ]]; then
            print_info "API –∑–∞–ø—É—â–µ–Ω (PID: $(cat .api.pid))"
        fi
        if [[ -f .exporter.pid ]]; then
            print_info "Exporter –∑–∞–ø—É—â–µ–Ω (PID: $(cat .exporter.pid))"
        fi
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
show_access_info() {
    print_header "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ"
    
    echo -e "${GREEN}üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:${NC}"
    echo "  TimeCard Dashboard:    http://localhost:8080"
    echo "  Grafana:              http://localhost:3000 (admin:timecard123)"
    echo "  Prometheus:           http://localhost:9091"
    echo "  AlertManager:         http://localhost:9093"
    echo ""
    
    echo -e "${GREEN}üìä API Endpoints:${NC}"
    echo "  Health Check:         http://localhost:8080/api/health"
    echo "  Extended Metrics:     http://localhost:8080/api/metrics/extended"
    echo "  Alerts:              http://localhost:8080/api/alerts"
    echo "  Prometheus Metrics:   http://localhost:9090/metrics"
    echo ""
    
    echo -e "${GREEN}üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö:${NC}"
    echo "  Prometheus:           ./data/prometheus"
    echo "  Grafana:             ./data/grafana"
    echo "  AlertManager:        ./data/alertmanager"
    echo ""
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-start}" in
        "start")
            check_dependencies
            create_directories
            
            if [[ "${2:-docker}" == "docker" ]]; then
                start_with_docker
            else
                start_development
            fi
            
            sleep 10
            check_services
            show_access_info
            ;;
            
        "stop")
            if [[ "${2:-docker}" == "docker" ]]; then
                print_header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose"
                docker-compose down
                print_success "Docker —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            else
                stop_development
            fi
            ;;
            
        "restart")
            $0 stop $2
            sleep 5
            $0 start $2
            ;;
            
        "status")
            check_services
            ;;
            
        "logs")
            view_logs $2
            ;;
            
        "clean")
            print_header "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
            docker-compose down -v
            sudo rm -rf data/
            print_success "–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã"
            ;;
            
        "help"|*)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|status|logs|clean} [docker|dev]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  start [docker|dev]  - –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
            echo "  stop [docker|dev]   - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
            echo "  restart [docker|dev]- –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
            echo "  status             - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
            echo "  logs [docker|dev]  - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
            echo "  clean              - –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"
            echo "  help               - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            echo ""
            echo "–†–µ–∂–∏–º—ã:"
            echo "  docker (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) - –ó–∞–ø—É—Å–∫ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö"
            echo "  dev                   - –ó–∞–ø—É—Å–∫ –≤ development —Ä–µ–∂–∏–º–µ"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0 start docker       # –ó–∞–ø—É—Å–∫ —Å Docker"
            echo "  $0 start dev          # –ó–∞–ø—É—Å–∫ –≤ dev —Ä–µ–∂–∏–º–µ"
            echo "  $0 logs docker        # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ Docker"
            ;;
    esac
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'print_info "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è..."; stop_development; exit 0' INT TERM

# –ó–∞–ø—É—Å–∫
main "$@"