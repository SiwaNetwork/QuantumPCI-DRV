#!/usr/bin/env python3
# demo-real.py - –†–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ TimeCard —Å –¥–∞–Ω–Ω—ã–º–∏ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

import os
import sys
import time
import threading
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ API –º–æ–¥—É–ª—è–º
api_path = Path(__file__).parent / 'api'
sys.path.insert(0, str(api_path))

def main():
    print("="*80)
    print("üöÄ TimeCard PTP OCP Real Monitoring v2.0")
    print("="*80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
    real_api_path = api_path / 'timecard-real-api.py'
    
    if real_api_path.exists():
        print("‚úÖ Real TimeCard API found - starting real hardware monitoring")
        print("="*80)
        print("üîß Real Hardware Features:")
        print("   üå°Ô∏è  Real thermal sensors from sysfs/hwmon")
        print("   ‚ö°  Real power monitoring from device registers")
        print("   üõ∞Ô∏è  Real GNSS status from device interface")
        print("   ‚ö°  Real PTP metrics from ptp4l")
        print("   üì°  Real hardware status from sysfs")
        print("   üîß  Direct device communication")
        print("   üìä  Real-time data from actual TimeCard")
        print("   üö®  Real alerting based on actual thresholds")
        print("   üìà  Real historical data from device")
        print("   üîå  Real WebSocket updates from hardware")
        print("="*80)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API
        try:
            import importlib.util
            spec = importlib.util.spec_from_file_location("timecard_real_api", str(real_api_path))
            timecard_real_api = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(timecard_real_api)
            
            print("üìä Real Dashboard: http://localhost:8080/dashboard")
            print("üì± Real PWA:      http://localhost:8080/pwa")
            print("üîß Real API:      http://localhost:8080/api/")
            print("üè† Main Page:     http://localhost:8080/")
            print("="*80)
            print("üéØ Starting real hardware monitoring...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            timecard_real_api.socketio.run(
                timecard_real_api.app, 
                host='0.0.0.0', 
                port=8080, 
                debug=False,
                allow_unsafe_werkzeug=True
            )
            
        except ImportError as e:
            print(f"‚ùå Error importing real API: {e}")
            fallback_to_demo()
        except Exception as e:
            print(f"‚ùå Error running real API: {e}")
            fallback_to_demo()
            
    else:
        print("‚ùå Real API not found!")
        fallback_to_demo()

def fallback_to_demo():
    """Fallback –∫ –¥–µ–º–æ –≤–µ—Ä—Å–∏–∏"""
    print("="*80)
    print("üîÑ Falling back to DEMO mode (simulated data)")
    print("="*80)
    print("üìã Demo Features Available:")
    print("   üìä  Simulated PTP metrics")
    print("   üå°Ô∏è  Simulated thermal data")
    print("   ‚ö°  Simulated power data")
    print("   üõ∞Ô∏è  Simulated GNSS data")
    print("   üîå  WebSocket updates")
    print("   üì±  Web interface")
    print("="*80)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        import importlib.util
        demo_api_path = api_path / 'timecard-extended-api.py'
        spec = importlib.util.spec_from_file_location("demo_api", str(demo_api_path))
        demo_api = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(demo_api)
        
        print("üìä Demo Dashboard:    http://localhost:8080/dashboard")
        print("üîß Demo API:          http://localhost:8080/api/")
        print("üè† Main Page:         http://localhost:8080/")
        print("="*80)
        print("üéØ Starting demo server...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ —Å–µ—Ä–≤–µ—Ä
        demo_api.socketio.run(
            demo_api.app, 
            host='0.0.0.0', 
            port=8080, 
            debug=False,
            allow_unsafe_werkzeug=True
        )
        
    except Exception as e:
        print(f"‚ùå Error running demo API: {e}")
        sys.exit(1)

def check_hardware():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""
    print("üîç Checking for real TimeCard hardware...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ sysfs
    timecard_sysfs = "/sys/class/timecard"
    if os.path.exists(timecard_sysfs):
        devices = os.listdir(timecard_sysfs)
        if devices:
            print(f"‚úÖ Found TimeCard devices in sysfs: {devices}")
            return True
        else:
            print("‚ö†Ô∏è  TimeCard sysfs exists but no devices found")
    else:
        print("‚ùå TimeCard sysfs not found")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PTP —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    ptp_devices = []
    try:
        import glob
        ptp_devices = glob.glob("/dev/ptp*")
        if ptp_devices:
            print(f"‚úÖ Found PTP devices: {ptp_devices}")
        else:
            print("‚ùå No PTP devices found")
    except Exception as e:
        print(f"‚ùå Error checking PTP devices: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
    try:
        result = os.system("lsmod | grep ptp_ocp > /dev/null 2>&1")
        if result == 0:
            print("‚úÖ PTP OCP driver loaded")
        else:
            print("‚ùå PTP OCP driver not loaded")
    except Exception as e:
        print(f"‚ùå Error checking driver: {e}")
    
    return len(ptp_devices) > 0

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    has_hardware = check_hardware()
    
    if has_hardware:
        print("üéâ Real TimeCard hardware detected!")
        main()
    else:
        print("‚ö†Ô∏è  No real TimeCard hardware detected, using demo mode")
        fallback_to_demo() 