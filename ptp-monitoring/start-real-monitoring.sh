#!/bin/bash
# start-real-monitoring.sh - –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ TimeCard PTP OCP

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ TimeCard
check_timecard_driver() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ TimeCard"
    
    if [ -d "/sys/class/timecard" ]; then
        print_success "–î—Ä–∞–π–≤–µ—Ä TimeCard –Ω–∞–π–¥–µ–Ω"
        
        # –ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        devices=$(ls /sys/class/timecard/ 2>/dev/null | wc -l)
        if [ $devices -gt 0 ]; then
            print_success "–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $devices"
            for device in /sys/class/timecard/*; do
                device_id=$(basename $device)
                serial=$(cat $device/serialnum 2>/dev/null || echo "UNKNOWN")
                print_info "  üïê $device_id: $serial"
            done
        else
            print_warning "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ TimeCard –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
    else
        print_error "–î—Ä–∞–π–≤–µ—Ä TimeCard –Ω–µ –Ω–∞–π–¥–µ–Ω"
        print_info "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥—Ä–∞–π–≤–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω: sudo modprobe timecard"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    
    # Python
    if ! command -v python3 &> /dev/null; then
        print_error "Python3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    print_success "Python3 –Ω–∞–π–¥–µ–Ω"
    
    # Flask
    if ! python3 -c "import flask" &> /dev/null; then
        print_warning "Flask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
        pip3 install flask flask-socketio flask-cors
    fi
    print_success "Flask —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    if lsof -Pi :8080 -sTCP:LISTEN -t >/dev/null 2>&1; then
        print_warning "–ü–æ—Ä—Ç 8080 —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
    fi
}

# –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
start_real_api() {
    print_header "–ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    
    cd api
    
    print_info "–ó–∞–ø—É—Å–∫ TimeCard Real API..."
    nohup python3 timecard-real-api.py > ../real-api.log 2>&1 &
    API_PID=$!
    
    print_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ API..."
    sleep 5
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞
    if curl -s http://localhost:8080/api/devices > /dev/null 2>&1; then
        print_success "API –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ (PID: $API_PID)"
    else
        print_error "API –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
check_real_data() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    
    print_info "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤..."
    devices_response=$(curl -s http://localhost:8080/api/devices)
    device_count=$(echo $devices_response | python3 -c "import sys, json; data=json.load(sys.stdin); print(data['count'])")
    
    if [ $device_count -gt 0 ]; then
        print_success "–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $device_count"
        
        print_info "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫..."
        metrics_response=$(curl -s http://localhost:8080/api/metrics/real)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        ptp_offset=$(echo $metrics_response | python3 -c "import sys, json; data=json.load(sys.stdin); device=list(data.keys())[0]; print(data[device]['ptp']['offset_ns'])")
        gnss_status=$(echo $metrics_response | python3 -c "import sys, json; data=json.load(sys.stdin); device=list(data.keys())[0]; print(data[device]['gnss']['sync_status'])")
        
        print_info "üì° PTP Offset: ${ptp_offset} ns"
        print_info "üõ∞Ô∏è  GNSS Status: ${gnss_status}"
        
    else
        print_warning "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
check_alerts() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"
    
    alerts_response=$(curl -s http://localhost:8080/api/alerts)
    alert_count=$(echo $alerts_response | python3 -c "import sys, json; data=json.load(sys.stdin); print(data['count'])")
    
    if [ $alert_count -gt 0 ]; then
        print_warning "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: $alert_count"
        echo $alerts_response | python3 -c "
import sys, json
data = json.load(sys.stdin)
for alert in data['alerts']:
    print(f\"  üö® {alert['severity'].upper()}: {alert['message']}\")
"
    else
        print_success "–ê–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
show_access_info() {
    print_header "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ"
    
    echo -e "${GREEN}üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:${NC}"
    echo "  Real Dashboard:    http://localhost:8080/dashboard"
    echo "  API Endpoints:     http://localhost:8080/api/"
    echo "  Main Page:         http://localhost:8080/"
    echo ""
    
    echo -e "${GREEN}üìä API Endpoints:${NC}"
    echo "  Devices:           http://localhost:8080/api/devices"
    echo "  Real Metrics:      http://localhost:8080/api/metrics/real"
    echo "  Alerts:            http://localhost:8080/api/alerts"
    echo "  Device Status:     http://localhost:8080/api/device/ocp0/status"
    echo ""
    
    echo -e "${GREEN}üìÅ –õ–æ–≥–∏:${NC}"
    echo "  API Log:           ./real-api.log"
    echo ""
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
stop_services() {
    print_header "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
    
    if pkill -f "python.*timecard-real-api" 2>/dev/null; then
        print_success "API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_info "API –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
    
    if curl -s http://localhost:8080/api/devices > /dev/null 2>&1; then
        print_success "API —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        metrics_response=$(curl -s http://localhost:8080/api/metrics/real)
        if [ $? -eq 0 ]; then
            print_success "–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã"
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            ptp_offset=$(echo $metrics_response | python3 -c "import sys, json; data=json.load(sys.stdin); device=list(data.keys())[0]; print(data[device]['ptp']['offset_ns'])")
            gnss_status=$(echo $metrics_response | python3 -c "import sys, json; data=json.load(sys.stdin); device=list(data.keys())[0]; print(data[device]['gnss']['sync_status'])")
            
            print_info "üì° PTP Offset: ${ptp_offset} ns"
            print_info "üõ∞Ô∏è  GNSS Status: ${gnss_status}"
        else
            print_warning "–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        fi
    else
        print_error "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-start}" in
        "start")
            check_timecard_driver
            check_dependencies
            start_real_api
            sleep 3
            check_real_data
            check_alerts
            show_access_info
            ;;
            
        "stop")
            stop_services
            ;;
            
        "restart")
            $0 stop
            sleep 2
            $0 start
            ;;
            
        "status")
            check_status
            ;;
            
        "logs")
            if [ -f "real-api.log" ]; then
                tail -f real-api.log
            else
                print_error "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
            
        "help"|*)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|status|logs}"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  start   - –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
            echo "  stop    - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
            echo "  restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
            echo "  status  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
            echo "  logs    - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
            echo "  help    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            echo ""
            echo "–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
            echo "  üì° PTP offset –∏ drift –∏–∑ –¥—Ä–∞–π–≤–µ—Ä–∞"
            echo "  üõ∞Ô∏è  GNSS sync status –∏–∑ –¥—Ä–∞–π–≤–µ—Ä–∞"
            echo "  üîå SMA connector status –∏–∑ –¥—Ä–∞–π–≤–µ—Ä–∞"
            echo "  üö® Real-time alerts –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"
            ;;
    esac
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'print_info "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è..."; stop_services; exit 0' INT TERM

# –ó–∞–ø—É—Å–∫
main "$@" 