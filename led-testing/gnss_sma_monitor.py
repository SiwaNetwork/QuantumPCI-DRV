#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GNSS –∏ SMA —Å—Ç–∞—Ç—É—Å–æ–≤ —Å LED –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
"""

import subprocess
import json
import time
import sys
import os

class GNSSSMAMonitorFixed:
    def __init__(self, bus=1, addr=0x37):
        self.bus = bus
        self.addr = addr
        self.quantum_pci_timecard_sysfs = "/sys/class/timecard/ocp0"
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å—Ö–µ–º–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ LED
        # LED 1,3,5 –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–≥–∏—Å—Ç—Ä—ã 0x01,0x03,0x05
        # LED 2,4,6 –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–≥–∏—Å—Ç—Ä—ã 0x07,0x09,0x0B
        self.led_map = {
            'gnss_sync': 0,      # Power LED - —Ä–µ–≥–∏—Å—Ç—Ä 0x01
            'gnss_holdover': 1,   # Sync LED - —Ä–µ–≥–∏—Å—Ç—Ä 0x07
            'sma3_status': 2,     # GNSS LED - —Ä–µ–≥–∏—Å—Ç—Ä 0x03
            'sma4_status': 3,     # Alarm LED - —Ä–µ–≥–∏—Å—Ç—Ä 0x09
            'clock_source': 4,    # Status1 LED - —Ä–µ–≥–∏—Å—Ç—Ä 0x05
            'system_status': 5    # Status2 LED - —Ä–µ–≥–∏—Å—Ç—Ä 0x0B
        }
        
        # –ú–∞–ø–ø–∏–Ω–≥ LED –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã
        self.led_registers = {
            0: 0x01,  # LED 1 - Power
            1: 0x07,  # LED 2 - Sync (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!)
            2: 0x03,  # LED 3 - GNSS
            3: 0x09,  # LED 4 - Alarm (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!)
            4: 0x05,  # LED 5 - Status1
            5: 0x0B   # LED 6 - Status2 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!)
        }
        
        self.colors = {
            'off': 0x00,
            'green': 0xFF,
            'red': 0xFF,
            'purple': 0x80,
            'yellow': 0xC0
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        self.init_led_controller()
    
    def check_i2c_device(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è I2C —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            result = subprocess.run(['sudo', 'i2cdetect', '-y', str(self.bus)], 
                                  capture_output=True, text=True, check=True)
            # –ò—â–µ–º –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "37" (–∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ i2cdetect)
            return f"{self.addr:02x}" in result.stdout
        except subprocess.CalledProcessError:
            return False
    
    def init_led_controller(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LED –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        try:
            # –í–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            subprocess.run(['sudo', 'i2cset', '-y', str(self.bus), f'0x{self.addr:02x}', '0x00', '0x01'], check=True)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–∞
            subprocess.run(['sudo', 'i2cset', '-y', str(self.bus), f'0x{self.addr:02x}', '0x6E', '0xFF'], check=True)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ scaling —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
            for i in range(18):
                reg = 0x4A + i
                subprocess.run(['sudo', 'i2cset', '-y', str(self.bus), f'0x{self.addr:02x}', f'0x{reg:02x}', '0xFF'], check=True)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            subprocess.run(['sudo', 'i2cset', '-y', str(self.bus), f'0x{self.addr:02x}', '0x49', '0x00'], check=True)
            
            print("‚úÖ LED –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LED –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: {e}")
            return False
    
    def set_led_brightness(self, led_index, brightness):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è—Ä–∫–æ—Å—Ç–∏ LED —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º"""
        if led_index not in self.led_registers:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π LED –∏–Ω–¥–µ–∫—Å: {led_index}")
            return False
        
        try:
            reg = self.led_registers[led_index]
            subprocess.run(['sudo', 'i2cset', '-y', str(self.bus), f'0x{self.addr:02x}', f'0x{reg:02x}', f'0x{brightness:02x}'], check=True)
            subprocess.run(['sudo', 'i2cset', '-y', str(self.bus), f'0x{self.addr:02x}', '0x49', '0x00'], check=True)
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ LED {led_index}: {e}")
            return False
    
    def read_sysfs_value(self, attribute):
        """–ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ sysfs"""
        try:
                            with open(f"{self.quantum_pci_timecard_sysfs}/{attribute}", 'r') as f:
                return f.read().strip()
        except (FileNotFoundError, PermissionError):
            return None
    
    def get_gnss_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ GNSS"""
        gnss_sync = self.read_sysfs_value('gnss_sync')
        clock_source = self.read_sysfs_value('clock_source')
        
        status = {
            'sync': gnss_sync == 'SYNC' if gnss_sync else False,
            'holdover': clock_source == 'holdover' if clock_source else False,
            'source': clock_source if clock_source else 'unknown'
        }
        
        return status
    
    def get_sma_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ SMA –≤—ã—Ö–æ–¥–æ–≤"""
        sma_status = {}
        
        for i in range(1, 5):
            sma_value = self.read_sysfs_value(f'sma{i}')
            if sma_value:
                sma_status[f'sma{i}'] = sma_value
            else:
                sma_status[f'sma{i}'] = 'unknown'
        
        return sma_status
    
    def update_led_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ LED –Ω–∞ –æ—Å–Ω–æ–≤–µ GNSS –∏ SMA"""
        gnss_status = self.get_gnss_status()
        sma_status = self.get_sma_status()
        
        # LED 0: GNSS Sync Status (Power LED)
        if gnss_status['sync']:
            self.set_led_brightness(0, self.colors['green'])  # –ó–µ–ª–µ–Ω—ã–π - SYNC
        else:
            self.set_led_brightness(0, self.colors['red'])    # –ö—Ä–∞—Å–Ω—ã–π - LOST
        
        # LED 1: GNSS Holdover Status (Sync LED)
        if gnss_status['holdover']:
            self.set_led_brightness(1, self.colors['purple']) # –°–∏—Ä–µ–Ω–µ–≤—ã–π - holdover
        else:
            self.set_led_brightness(1, self.colors['off'])    # –í—ã–∫–ª—é—á–µ–Ω
        
        # LED 2: SMA3 Status (GNSS LED)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SMA3 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≤—ã—Ö–æ–¥ –ò GNSS —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω
        sma3_working = sma_status.get('sma3', '').startswith('OUT:')
        if gnss_status['sync'] and sma3_working:
            self.set_led_brightness(2, self.colors['green'])  # –ó–µ–ª–µ–Ω—ã–π - –Ω–∞–¥–µ–∂–Ω—ã–π
        else:
            self.set_led_brightness(2, self.colors['red'])    # –ö—Ä–∞—Å–Ω—ã–π - –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã–π
        
        # LED 3: SMA4 Status (Alarm LED)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SMA4 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≤—ã—Ö–æ–¥ –ò GNSS —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω
        sma4_working = sma_status.get('sma4', '').startswith('OUT:')
        if gnss_status['sync'] and sma4_working:
            self.set_led_brightness(3, self.colors['green'])  # –ó–µ–ª–µ–Ω—ã–π - –Ω–∞–¥–µ–∂–Ω—ã–π
        else:
            self.set_led_brightness(3, self.colors['red'])    # –ö—Ä–∞—Å–Ω—ã–π - –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã–π
        
        # LED 4: Clock Source Status (Status1 LED)
        if gnss_status['source'] == 'gnss':
            self.set_led_brightness(4, self.colors['green'])  # –ó–µ–ª–µ–Ω—ã–π - GNSS
        elif gnss_status['source'] == 'holdover':
            self.set_led_brightness(4, self.colors['purple']) # –°–∏—Ä–µ–Ω–µ–≤—ã–π - holdover
        else:
            self.set_led_brightness(4, self.colors['yellow']) # –ñ–µ–ª—Ç—ã–π - –¥—Ä—É–≥–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫
        
        # LED 5: System Status (Status2 LED)
        if gnss_status['sync'] and not gnss_status['holdover']:
            self.set_led_brightness(5, self.colors['green'])  # –ó–µ–ª–µ–Ω—ã–π - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        else:
            self.set_led_brightness(5, self.colors['yellow']) # –ñ–µ–ª—Ç—ã–π - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        
        return {
            'gnss': gnss_status,
            'sma': sma_status,
            'leds': {
                'power': 'green' if gnss_status['sync'] else 'red',
                'sync': 'purple' if gnss_status['holdover'] else 'off',
                'gnss': 'green' if (gnss_status['sync'] and sma_status.get('sma3', '').startswith('OUT:')) else 'red',
                'alarm': 'green' if (gnss_status['sync'] and sma_status.get('sma4', '').startswith('OUT:')) else 'red',
                'status1': 'green' if gnss_status['source'] == 'gnss' else ('purple' if gnss_status['source'] == 'holdover' else 'yellow'),
                'status2': 'green' if (gnss_status['sync'] and not gnss_status['holdover']) else 'yellow'
            }
        }
    
    def turn_off_all_leds(self):
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö LED"""
        print("üîö –í—ã–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö LED...")
        for led_index in range(6):
            self.set_led_brightness(led_index, 0)
        print("‚úÖ –í—Å–µ LED –≤—ã–∫–ª—é—á–µ–Ω—ã")
    
    def export_metrics(self, status):
        """–≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ –≤ JSON —Ñ–∞–π–ª"""
        metrics = {
            'timestamp': time.time(),
            'gnss_sync': status['gnss']['sync'],
            'gnss_holdover': status['gnss']['holdover'],
            'clock_source': status['gnss']['source'],
            'sma_status': status['sma'],
            'led_status': status['leds']
        }
        
        try:
            with open('gnss_sma_metrics_fixed.json', 'w') as f:
                json.dump(metrics, f, indent=2)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}")
    
    def print_status(self, status):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print("\n" + "="*60)
        print("üìä –°–¢–ê–¢–£–° GNSS –ò SMA –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        print("="*60)
        
        # GNSS —Å—Ç–∞—Ç—É—Å
        gnss = status['gnss']
        print(f"üõ∞Ô∏è  GNSS Sync: {'‚úÖ SYNC' if gnss['sync'] else '‚ùå LOST'}")
        print(f"üîÑ Holdover: {'‚úÖ –ê–ö–¢–ò–í–ï–ù' if gnss['holdover'] else '‚ùå –ù–ï –ê–ö–¢–ò–í–ï–ù'}")
        print(f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫ —á–∞—Å–æ–≤: {gnss['source']}")
        
        # SMA —Å—Ç–∞—Ç—É—Å
        print("\nüîå SMA –í—ã—Ö–æ–¥—ã:")
        for sma, value in status['sma'].items():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è SMA3 –∏ SMA4
            if sma in ['sma3', 'sma4']:
                is_output = value.startswith('OUT:')
                reliability = "‚úÖ –ù–ê–î–ï–ñ–ù–´–ô" if (status['gnss']['sync'] and is_output) else "‚ùå –ù–ï–ù–ê–î–ï–ñ–ù–´–ô"
                print(f"  {sma.upper()}: {value} ({reliability})")
            else:
                print(f"  {sma.upper()}: {value}")
        
        # LED —Å—Ç–∞—Ç—É—Å
        print("\nüí° LED –ò–Ω–¥–∏–∫–∞—Ü–∏—è:")
        led_names = ['Power', 'Sync', 'GNSS', 'Alarm', 'Status1', 'Status2']
        for i, (name, color) in enumerate(zip(led_names, status['leds'].values())):
            print(f"  {name}: {color}")
        
        print("="*60)
    
    def monitor_loop(self, interval=5):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ GNSS –∏ SMA —Å—Ç–∞—Ç—É—Å–æ–≤...")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å—Ö–µ–º–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ LED")
        print("üéØ LED 2,4,6 –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–µ–≥–∏—Å—Ç—Ä—ã 0x07,0x09,0x0B")
        
        try:
            while True:
                status = self.update_led_status()
                self.export_metrics(status)
                self.print_status(status)
                time.sleep(interval)
                
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            self.turn_off_all_leds()
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = GNSSSMAMonitorFixed()
    
    if not monitor.check_i2c_device():
        print("‚ùå IS32FL3207 –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ I2C —à–∏–Ω–µ")
        sys.exit(1)
    
    print("‚úÖ IS32FL3207 –Ω–∞–π–¥–µ–Ω")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    print("\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã LED:")
    
    # –¢–µ—Å—Ç –∫–∞–∂–¥–æ–≥–æ LED
    for i in range(6):
        print(f"–¢–µ—Å—Ç LED {i} (—Ä–µ–≥–∏—Å—Ç—Ä 0x{monitor.led_registers[i]:02x})...")
        monitor.set_led_brightness(i, monitor.colors['green'])
        time.sleep(1)
        monitor.set_led_brightness(i, 0)
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitor.monitor_loop()

if __name__ == "__main__":
    main() 