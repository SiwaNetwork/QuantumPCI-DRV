#!/usr/bin/env python3
"""
Quantum-PCI Realistic Monitoring API
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ ptp_ocp –¥—Ä–∞–π–≤–µ—Ä–µ
"""

from flask import Flask, jsonify, request, send_from_directory
from flask_socketio import SocketIO
from flask_cors import CORS
import subprocess
import threading
import time
import os
import glob
from collections import deque, defaultdict
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç PTP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
try:
    from intel_network_monitor import get_ptp_network_metrics, get_ptp_network_health, get_ptp_network_ptp_metrics, get_ptp_interface_metrics
    PTP_MONITORING_AVAILABLE = True
    print("‚úÖ PTP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError as e:
    PTP_MONITORING_AVAILABLE = False
    print(f"‚ö†Ô∏è  PTP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {e}")
# –ò–º–ø–æ—Ä—Ç BMP280 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
try:
    from bmp280_monitor import get_bmp280_data, get_bmp280_info, is_bmp280_available
    BMP280_MONITORING_AVAILABLE = True
    print("‚úÖ BMP280 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError as e:
    BMP280_MONITORING_AVAILABLE = False
    print(f"‚ö†Ô∏è  BMP280 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {e}")

# –ò–º–ø–æ—Ä—Ç INA219 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
try:
    from ina219_monitor import get_ina219_data, get_ina219_info, is_ina219_available
    INA219_MONITORING_AVAILABLE = True
    print("‚úÖ INA219 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError as e:
    INA219_MONITORING_AVAILABLE = False
    print(f"‚ö†Ô∏è  INA219 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {e}")

# PCT2075 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω - –¥–∞—Ç—á–∏–∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω
PCT2075_MONITORING_AVAILABLE = False
print("‚ùå PCT2075 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω - –¥–∞—Ç—á–∏–∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω")

# –ò–º–ø–æ—Ä—Ç BNO055 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
try:
    from bno055_monitor import BNO055Monitor
    BNO055_MONITORING_AVAILABLE = True
    print("‚úÖ BNO055 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError as e:
    BNO055_MONITORING_AVAILABLE = False
    print(f"‚ö†Ô∏è  BNO055 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {e}")


# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
CONFIG = {
    'version': '2.0.0-realistic',
    'server': {
        'port': 8080,
        'cors_allowed_origins': ['http://localhost:8080', 'http://127.0.0.1:8080']
    },
    'monitoring': {
        'update_interval_seconds': 5,
        'history_maxlen': 1000,
    },
    'alerts': {
        'ptp': {
            'offset_ns': {'warning': 1000, 'critical': 10000},
            'drift_ppb': {'warning': 100, 'critical': 1000},
        }
    }
}

# === –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä–∞ I2C ===
def initialize_i2c_mux():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä–∞ I2C –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –¥–∞—Ç—á–∏–∫–∞–º
    """
    try:
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä–∞ I2C...")

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä–∞
        I2C_BUS = 1
        MUX_ADDR = 0x70
        MUX_VALUE = 0x0F  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö —à–∏–Ω

        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä–∞
        cmd = f"i2cset -y {I2C_BUS} {MUX_ADDR:#x} {MUX_VALUE:#x}"

        print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {cmd}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)

        if result.returncode == 0:
            print("‚úÖ –ú—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä I2C —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            print(f"   –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ —à–∏–Ω—ã –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä–∞ (0x{MUX_VALUE:02X})")
        else:
            print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä: {result.stderr}")

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(0.5)

    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä–∞: {e}")
        print("   –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä–∞")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
print("="*80)
print("üöÄ Quantum-PCI Real Monitoring v2.0")
print("="*80)

# –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä I2C
initialize_i2c_mux()

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": CONFIG['server']['cors_allowed_origins']}})
socketio = SocketIO(app, cors_allowed_origins=CONFIG['server']['cors_allowed_origins'])

class QuantumPCIRealisticMonitor:
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¢–û–õ–¨–ö–û —Ç–µ—Ö –º–µ—Ç—Ä–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ ptp_ocp –¥—Ä–∞–π–≤–µ—Ä–µ
    
    –†–ï–ê–õ–¨–ù–´–ï –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥—Ä–∞–π–≤–µ—Ä–∞:
    - clock_status_offset (–Ω—Å)
    - clock_status_drift (ppb) 
    - gnss_sync (—Å—Ç–∞—Ç—É—Å)
    - clock_source (–∏—Å—Ç–æ—á–Ω–∏–∫)
    - serialnum (—Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä)
    - sma1-4 (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMA)
    - temperature_table (—Ç–æ–ª—å–∫–æ –¥–ª—è ART Card)
    """
    
    def __init__(self):
        self.devices = self.discover_devices()
        self.metrics_history = defaultdict(lambda: deque(maxlen=CONFIG['monitoring']['history_maxlen']))
        self.alert_history = deque(maxlen=100)
        self.start_time = time.time()
        self.start_monitoring()
        
    def discover_devices(self):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö Quantum-PCI —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        devices = []
        timecard_path = "/sys/class/timecard"
        
        try:
            if os.path.exists(timecard_path):
                for device_dir in glob.glob(f"{timecard_path}/*"):
                    device_id = os.path.basename(device_dir)
                    devices.append({
                        'id': device_id,
                        'sysfs_path': device_dir,
                        'serial': self._read_sysfs(device_dir, 'serialnum'),
                        'type': 'Quantum-PCI TimeCard'
                    })
                    print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            
        if not devices:
            print("‚ö†Ô∏è  Quantum-PCI —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("   –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
            print("   - –î—Ä–∞–π–≤–µ—Ä ptp_ocp –∑–∞–≥—Ä—É–∂–µ–Ω: lsmod | grep ptp_ocp")
            print("   - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∏–¥–Ω–æ: ls /sys/class/timecard/")
            
        return devices
    
    def _read_sysfs(self, device_path, attribute):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –∏–∑ sysfs"""
        try:
            file_path = os.path.join(device_path, attribute)
            if os.path.exists(file_path):
                with open(file_path, 'r') as f:
                    return f.read().strip()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {attribute}: {e}")
        return None
    
    def get_ptp_metrics(self, device):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö PTP –º–µ—Ç—Ä–∏–∫ –∏–∑ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        metrics = {}
        
        # –†–ï–ê–õ–¨–ù–´–ï –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ ptp_ocp –¥—Ä–∞–π–≤–µ—Ä–∞
        offset_raw = self._read_sysfs(device['sysfs_path'], 'clock_status_offset')
        drift_raw = self._read_sysfs(device['sysfs_path'], 'clock_status_drift')
        clock_source = self._read_sysfs(device['sysfs_path'], 'clock_source')
        utc_tai_offset_raw = self._read_sysfs(device['sysfs_path'], 'utc_tai_offset')
        tod_correction_raw = self._read_sysfs(device['sysfs_path'], 'tod_correction')
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏–π
        try:
            metrics['offset_ns'] = int(offset_raw) if offset_raw else 0
        except (ValueError, TypeError):
            metrics['offset_ns'] = 0
            
        try:
            metrics['drift_ppb'] = int(drift_raw) if drift_raw else 0
        except (ValueError, TypeError):
            metrics['drift_ppb'] = 0
            
        try:
            metrics['utc_tai_offset'] = int(utc_tai_offset_raw) if utc_tai_offset_raw else 0
        except (ValueError, TypeError):
            metrics['utc_tai_offset'] = 0
            
        try:
            metrics['tod_correction'] = int(tod_correction_raw) if tod_correction_raw else 0
        except (ValueError, TypeError):
            metrics['tod_correction'] = 0
            
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        irig_b_mode_raw = self._read_sysfs(device['sysfs_path'], 'irig_b_mode')
        ts_window_adjust_raw = self._read_sysfs(device['sysfs_path'], 'ts_window_adjust')
        
        try:
            metrics['irig_b_mode'] = int(irig_b_mode_raw) if irig_b_mode_raw else 0
        except (ValueError, TypeError):
            metrics['irig_b_mode'] = 0
            
        try:
            metrics['ts_window_adjust'] = int(ts_window_adjust_raw) if ts_window_adjust_raw else 0
        except (ValueError, TypeError):
            metrics['ts_window_adjust'] = 0
            
        metrics['clock_source'] = clock_source or 'UNKNOWN'
        
        # –°—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        offset_abs = abs(metrics['offset_ns'])
        if offset_abs > CONFIG['alerts']['ptp']['offset_ns']['critical']:
            metrics['status'] = 'critical'
        elif offset_abs > CONFIG['alerts']['ptp']['offset_ns']['warning']:
            metrics['status'] = 'warning'
        else:
            metrics['status'] = 'ok'
            
        return metrics
    
    def get_gnss_status(self, device):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ GNSS (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥—Ä–∞–π–≤–µ—Ä–∞)"""
        gnss_sync = self._read_sysfs(device['sysfs_path'], 'gnss_sync')
        
        status = {
            'sync_status': gnss_sync or 'UNKNOWN',
            'available': gnss_sync is not None
        }
        
        # –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
        if gnss_sync:
            if 'SYNC' in gnss_sync.upper():
                status['status'] = 'ok'
            elif 'LOST' in gnss_sync.upper():
                status['status'] = 'critical'
            else:
                status['status'] = 'warning'
        else:
            status['status'] = 'unknown'
            
        return status
    
    def get_sma_status(self, device):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ SMA —Ä–∞–∑—ä–µ–º–æ–≤"""
        sma_status = {}
        
        for i in range(1, 5):  # SMA1-4
            sma_config = self._read_sysfs(device['sysfs_path'], f'sma{i}')
            sma_status[f'sma{i}'] = {
                'config': sma_config or 'unknown',
                'available': sma_config is not None
            }
            
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏
        available_inputs = self._read_sysfs(device['sysfs_path'], 'available_sma_inputs')
        available_outputs = self._read_sysfs(device['sysfs_path'], 'available_sma_outputs')
        
        sma_status['available_inputs'] = available_inputs.split(',') if available_inputs else []
        sma_status['available_outputs'] = available_outputs.split(',') if available_outputs else []
        
        return sma_status
    
    def get_device_info(self, device):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        available_sources = self._read_sysfs(device['sysfs_path'], 'available_clock_sources')
        available_sma_inputs = self._read_sysfs(device['sysfs_path'], 'available_sma_inputs')
        available_sma_outputs = self._read_sysfs(device['sysfs_path'], 'available_sma_outputs')
        
        return {
            'device_id': device['id'],
            'serial_number': device['serial'] or 'UNKNOWN',
            'type': device['type'],
            'driver': 'ptp_ocp',
            'available_clock_sources': available_sources.split(',') if available_sources else [],
            'available_sma_inputs': available_sma_inputs.split(',') if available_sma_inputs else [],
            'available_sma_outputs': available_sma_outputs.split(',') if available_sma_outputs else [],
            'sysfs_path': device['sysfs_path']
        }
    
    def get_limited_temperature(self, device):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        –í–ù–ò–ú–ê–ù–ò–ï: –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (ART Card)
        """
        temp_data = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ temperature_table (—Ç–æ–ª—å–∫–æ ART Card)
        temp_table_path = os.path.join(device['sysfs_path'], 'temperature_table')
        if os.path.exists(temp_table_path):
            temp_data['temperature_table_available'] = True
            temp_data['note'] = 'Temperature table available (ART Card only)'
        else:
            temp_data['temperature_table_available'] = False
            temp_data['note'] = 'Temperature monitoring not available for this device'
            
        return temp_data
    
    def generate_alerts(self, device_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        alerts = []
        
        ptp_data = device_data.get('ptp', {})
        if ptp_data.get('status') == 'critical':
            alerts.append({
                'type': 'ptp_offset_critical',
                'message': f"PTP offset –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: {ptp_data.get('offset_ns', 0)} –Ω—Å",
                'severity': 'critical',
                'timestamp': time.time()
            })
        elif ptp_data.get('status') == 'warning':
            alerts.append({
                'type': 'ptp_offset_warning', 
                'message': f"PTP offset –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {ptp_data.get('offset_ns', 0)} –Ω—Å",
                'severity': 'warning',
                'timestamp': time.time()
            })
            
        gnss_data = device_data.get('gnss', {})
        if gnss_data.get('status') == 'critical':
            alerts.append({
                'type': 'gnss_sync_lost',
                'message': f"GNSS —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞: {gnss_data.get('sync_status', 'UNKNOWN')}",
                'severity': 'critical', 
                'timestamp': time.time()
            })
            
        return alerts
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        def monitor_loop():
            while True:
                try:
                    for device in self.devices:
                        # –°–±–æ—Ä –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        device_data = {
                            'ptp': self.get_ptp_metrics(device),
                            'gnss': self.get_gnss_status(device),
                            'sma': self.get_sma_status(device),
                            'device_info': self.get_device_info(device),
                            'temperature': self.get_limited_temperature(device),
                            'timestamp': time.time()
                        }
                        
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤
                        alerts = self.generate_alerts(device_data)
                        device_data['alerts'] = alerts
                        
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                        self.metrics_history[device['id']].append(device_data)
                        
                        # WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        socketio.emit('device_update', {
                            'device_id': device['id'],
                            'ptp_offset': device_data['ptp']['offset_ns'],
                            'ptp_drift': device_data['ptp']['drift_ppb'],
                            'gnss_status': device_data['gnss']['sync_status'],
                            'timestamp': time.time()
                        })
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    
                time.sleep(CONFIG['monitoring']['update_interval_seconds'])
        
        monitor_thread = threading.Thread(target=monitor_loop, daemon=True)
        monitor_thread.start()

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞
monitor = QuantumPCIRealisticMonitor()

# === API ROUTES ===

@app.route('/')
def main_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –∫—Ä–∞—Å–∏–≤—ã–π –¥–∞—à–±–æ—Ä–¥"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å API
    api_dir = os.path.dirname(os.path.abspath(__file__))
    return send_from_directory(api_dir, 'realistic-dashboard.html')

@app.route('/api/')
def api_index():
    """API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å disclaimer"""
    return jsonify({
        'api_name': 'Quantum-PCI Realistic Monitoring API',
        'version': CONFIG['version'],
        'description': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏–∑ ptp_ocp –¥—Ä–∞–π–≤–µ—Ä–∞',
        'disclaimer': {
            'limitations': [
                '–ù–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (—Ç–æ–ª—å–∫–æ temperature_table –¥–ª—è ART Card)',
                '–ù–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∏—Ç–∞–Ω–∏—è –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–π',
                '–ù–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ GNSS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Å–ø—É—Ç–Ω–∏–∫–∏, –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞)',
                '–ù–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ LED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ FPGA —Å–æ—Å—Ç–æ—è–Ω–∏—è',
                '–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ PTP/GNSS/SMA –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ sysfs'
            ],
            'available_metrics': [
                'PTP offset/drift –∏–∑ clock_status_*',
                'GNSS sync —Å—Ç–∞—Ç—É—Å –∏–∑ gnss_sync',
                'SMA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ sma1-4',
                '–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ clock_source',
                '–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ serialnum'
            ]
        },
        'endpoints': {
            'devices': '/api/devices',
            'device_status': '/api/device/<device_id>/status', 
            'real_metrics': '/api/metrics/real',
            'alerts': '/api/alerts',
            'roadmap': '/api/roadmap'
        },
        'detected_devices': len(monitor.devices),
        'timestamp': time.time()
    })

@app.route('/api/roadmap')
def api_roadmap():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç —Å –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç–æ–π —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    return jsonify({
        'title': '–î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ Quantum-PCI Monitoring',
        'current_version': '2.0 - Realistic Baseline',
        'current_capabilities': {
            'ptp_monitoring': '–ë–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ offset/drift',
            'gnss_status': '–°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ GNSS',
            'sma_configuration': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMA —Ä–∞–∑—ä–µ–º–æ–≤',
            'web_interface': '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
            'api': 'REST API —Å —á–µ—Å—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π'
        },
        'upcoming_releases': {
            'v2.1': {
                'timeline': '3-4 –Ω–µ–¥–µ–ª–∏',
                'features': ['–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è PTP –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤', '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏']
            },
            'v2.2': {
                'timeline': '2-3 –Ω–µ–¥–µ–ª–∏',
                'features': ['–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏', 'Dashboard customization', 'Mobile optimization']
            },
            'v2.3': {
                'timeline': '2-3 –Ω–µ–¥–µ–ª–∏', 
                'features': ['Prometheus integration', 'Configuration management', 'Authentication & Security']
            }
        },
        'long_term_vision': {
            'v3.0': 'Driver Enhancement Research',
            'v3.1': 'Advanced GNSS Features',
            'v3.2': 'Network Time Integration',
            'v4.0+': 'Enterprise Features & Cloud Integration'
        },
        'how_to_contribute': {
            'bug_reports': 'GitHub Issues –¥–ª—è –±–∞–≥–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
            'code_contributions': 'Pull requests –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∏—á–µ–π',
            'documentation': '–ü–æ–º–æ—â—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏',
            'research': '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥—Ä–∞–π–≤–µ—Ä–∞'
        },
        'roadmap_url': 'https://github.com/SiwaNetwork/QuantumPCI-DRV/blob/main/quantum-pci-monitoring/ROADMAP.md',
        'timestamp': time.time()
    })

@app.route('/api/devices')
def api_devices():
    """–°–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    devices_info = []
    for device in monitor.devices:
        device_info = monitor.get_device_info(device)
        devices_info.append(device_info)
    
    return jsonify({
        'count': len(monitor.devices),
        'devices': devices_info,
        'note': '–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥—Ä–∞–π–≤–µ—Ä–æ–º ptp_ocp',
        'timestamp': time.time()
    })

@app.route('/api/device/<device_id>/status')
def api_device_status(device_id):
    """–°—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    device = next((d for d in monitor.devices if d['id'] == device_id), None)
    if not device:
        return jsonify({'error': 'Device not found'}), 404
    
    device_data = {
        'ptp': monitor.get_ptp_metrics(device),
        'gnss': monitor.get_gnss_status(device),
        'sma': monitor.get_sma_status(device),
        'device_info': monitor.get_device_info(device),
        'temperature': monitor.get_limited_temperature(device),
        'timestamp': time.time()
    }
    
    device_data['alerts'] = monitor.generate_alerts(device_data)
    return jsonify(device_data)

@app.route('/api/metrics/real')
def api_real_metrics():
    """–†–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    all_metrics = {}
    
    for device in monitor.devices:
        all_metrics[device['id']] = {
            'ptp': monitor.get_ptp_metrics(device),
            'gnss': monitor.get_gnss_status(device),
            'sma': monitor.get_sma_status(device),
            'timestamp': time.time()
        }
    
    # –î–æ–±–∞–≤–ª—è–µ–º INA219 –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if INA219_MONITORING_AVAILABLE:
        try:
            ina219_data = get_ina219_data()
            all_metrics['ina219'] = ina219_data
        except Exception as e:
            all_metrics['ina219'] = {'error': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è INA219: {e}'}
    
    # –î–æ–±–∞–≤–ª—è–µ–º BMP280 –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if BMP280_MONITORING_AVAILABLE:
        try:
            bmp280_data = get_bmp280_data()
            all_metrics['bmp280'] = bmp280_data
        except Exception as e:
            all_metrics['bmp280'] = {'error': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è BMP280: {e}'}
    
    # –î–æ–±–∞–≤–ª—è–µ–º BNO055 –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if BNO055_MONITORING_AVAILABLE:
        try:
            bno055_monitor = BNO055Monitor()
            bno055_data = bno055_monitor.get_sensor_data()
            all_metrics['bno055'] = bno055_data
        except Exception as e:
            all_metrics['bno055'] = {'error': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è BNO055: {e}'}
    
    return jsonify({
        'metrics': all_metrics,
        'note': '–†–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ ptp_ocp –¥—Ä–∞–π–≤–µ—Ä–∞ + INA219 + BMP280 + BNO055',
        'timestamp': time.time()
    })

@app.route('/api/ina219')
def api_ina219():
    """–î–∞–Ω–Ω—ã–µ INA219 –¥–∞—Ç—á–∏–∫–æ–≤"""
    if not INA219_MONITORING_AVAILABLE:
        return jsonify({'error': 'INA219 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'})
    
    try:
        data = get_ina219_data()
        info = get_ina219_info()
        return jsonify({
            'data': data,
            'info': info,
            'timestamp': time.time()
        })
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è INA219: {e}'})



@app.route('/api/alerts')
def api_alerts():
    """–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã"""
    all_alerts = []
    
    for device in monitor.devices:
        device_data = {
            'ptp': monitor.get_ptp_metrics(device),
            'gnss': monitor.get_gnss_status(device)
        }
        
        alerts = monitor.generate_alerts(device_data)
        for alert in alerts:
            alert['device_id'] = device['id']
            all_alerts.append(alert)
    
    return jsonify({
        'alerts': all_alerts,
        'count': len(all_alerts),
        'timestamp': time.time()
    })

@app.route('/realistic-dashboard')
def realistic_dashboard():
    """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å —á–µ—Å—Ç–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å API
    api_dir = os.path.dirname(os.path.abspath(__file__))
    return send_from_directory(api_dir, 'realistic-dashboard.html')

@app.route('/health')
def health():
    """Health check"""
    return jsonify({
        'status': 'ok',
        'devices': len(monitor.devices),
        'version': CONFIG['version'],
        'realistic_monitoring': True,
        'timestamp': time.time()
    })

# === PTP Network Monitoring API ===

@app.route('/api/ptp-network')
def api_ptp_network():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å–µ—Ç–µ–≤—ã—Ö –∫–∞—Ä—Ç —Å PTP"""
    if not PTP_MONITORING_AVAILABLE:
        return jsonify({
            'error': 'PTP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'message': '–ú–æ–¥—É–ª—å intel_network_monitor –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }), 503
    
    try:
        metrics = get_ptp_network_metrics()
        return jsonify(metrics)
    except Exception as e:
        return jsonify({
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ PTP',
            'message': str(e)
        }), 500

@app.route('/api/ptp-network/health')
def api_ptp_network_health():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è PTP —Å–µ—Ç–µ–≤—ã—Ö –∫–∞—Ä—Ç"""
    if not PTP_MONITORING_AVAILABLE:
        return jsonify({
            'error': 'PTP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'message': '–ú–æ–¥—É–ª—å intel_network_monitor –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }), 503
    
    try:
        health = get_ptp_network_health()
        return jsonify(health)
    except Exception as e:
        return jsonify({
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è PTP',
            'message': str(e)
        }), 500

@app.route('/api/ptp-network/ptp')
def api_ptp_network_ptp():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PTP –º–µ—Ç—Ä–∏–∫ —Å–µ—Ç–µ–≤—ã—Ö –∫–∞—Ä—Ç"""
    if not PTP_MONITORING_AVAILABLE:
        return jsonify({
            'error': 'PTP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'message': '–ú–æ–¥—É–ª—å intel_network_monitor –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }), 503
    
    try:
        ptp_metrics = get_ptp_network_ptp_metrics()
        return jsonify(ptp_metrics)
    except Exception as e:
        return jsonify({
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PTP –º–µ—Ç—Ä–∏–∫',
            'message': str(e)
        }), 500

@app.route('/api/ptp-network/interface/<interface>')
def api_ptp_interface(interface):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ PTP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    if not PTP_MONITORING_AVAILABLE:
        return jsonify({
            'error': 'PTP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'message': '–ú–æ–¥—É–ª—å intel_network_monitor –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }), 503
    
    try:
        metrics = get_ptp_interface_metrics(interface)
        return jsonify(metrics)
    except Exception as e:
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {interface}',
            'message': str(e)
        }), 500

# === Intel Network Monitoring API (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å) ===

@app.route('/api/intel-network')
def api_intel_network():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ Intel —Å–µ—Ç–µ–≤—ã—Ö –∫–∞—Ä—Ç (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    if not PTP_MONITORING_AVAILABLE:
        return jsonify({
            'error': 'PTP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'message': '–ú–æ–¥—É–ª—å intel_network_monitor –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }), 503
    
    try:
        from intel_network_monitor import get_intel_network_metrics
        metrics = get_intel_network_metrics()
        return jsonify(metrics)
    except Exception as e:
        return jsonify({
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ Intel',
            'message': str(e)
        }), 500

@app.route('/api/intel-network/health')
def api_intel_network_health():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è Intel —Å–µ—Ç–µ–≤—ã—Ö –∫–∞—Ä—Ç (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    if not PTP_MONITORING_AVAILABLE:
        return jsonify({
            'error': 'Intel –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'message': '–ú–æ–¥—É–ª—å intel_network_monitor –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }), 503
    
    try:
        health = get_intel_network_health()
        return jsonify(health)
    except Exception as e:
        return jsonify({
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è Intel',
            'message': str(e)
        }), 500

@app.route('/api/intel-network/ptp')
def api_intel_network_ptp():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PTP –º–µ—Ç—Ä–∏–∫ Intel —Å–µ—Ç–µ–≤—ã—Ö –∫–∞—Ä—Ç"""
    if not INTEL_MONITORING_AVAILABLE:
        return jsonify({
            'error': 'Intel –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'message': '–ú–æ–¥—É–ª—å intel_network_monitor –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }), 503
    
    try:
        ptp_metrics = get_intel_ptp_metrics()
        return jsonify(ptp_metrics)
    except Exception as e:
        return jsonify({
            'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PTP –º–µ—Ç—Ä–∏–∫ Intel',
            'message': str(e)
        }), 500

@app.route('/api/intel-network/interface/<interface>')
def api_intel_interface(interface):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Intel –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    if not INTEL_MONITORING_AVAILABLE:
        return jsonify({
            'error': 'Intel –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'message': '–ú–æ–¥—É–ª—å intel_network_monitor –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }), 503
    
    try:
        from intel_network_monitor import get_intel_interface_metrics
        metrics = get_intel_interface_metrics(interface)
        return jsonify(metrics)
    except Exception as e:
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {interface}',
            'message': str(e)
        }), 500

# === BMP280 Sensor API Endpoints ===

@app.route('/api/bmp280')
def api_bmp280_data():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–∞ BMP280"""
    if not BMP280_MONITORING_AVAILABLE:
        return jsonify({
            'error': 'BMP280 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'available': False
        }), 503
    
    try:
        data = get_bmp280_data()
        return jsonify(data)
    except Exception as e:
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö BMP280: {str(e)}',
            'available': False
        }), 500

@app.route('/api/bmp280/info')
def api_bmp280_info():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç—á–∏–∫–µ BMP280"""
    if not BMP280_MONITORING_AVAILABLE:
        return jsonify({
            'error': 'BMP280 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'available': False
        }), 503
    
    try:
        info = get_bmp280_info()
        return jsonify(info)
    except Exception as e:
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ BMP280: {str(e)}',
            'available': False
        }), 500

@app.route('/api/bmp280/temperature')
def api_bmp280_temperature():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å BMP280"""
    if not BMP280_MONITORING_AVAILABLE:
        return jsonify({
            'error': 'BMP280 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'available': False
        }), 503
    
    try:
        from bmp280_monitor import bmp280_monitor
        temperature = bmp280_monitor.get_temperature_only()
        if temperature is not None:
            return jsonify({
                'temperature_c': temperature,
                'timestamp': time.time(),
                'available': True
            })
        else:
            return jsonify({
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É',
                'available': False
            }), 500
    except Exception as e:
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {str(e)}',
            'available': False
        }), 500

@app.route('/api/bmp280/pressure')
def api_bmp280_pressure():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–∞–≤–ª–µ–Ω–∏—è —Å BMP280"""
    if not BMP280_MONITORING_AVAILABLE:
        return jsonify({
            'error': 'BMP280 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'available': False
        }), 503
    
    try:
        from bmp280_monitor import bmp280_monitor
        pressure = bmp280_monitor.get_pressure_only()
        if pressure is not None:
            return jsonify({
                'pressure_pa': pressure,
                'pressure_hpa': pressure / 100,
                'pressure_mbar': pressure / 100,
                'timestamp': time.time(),
                'available': True
            })
        else:
            return jsonify({
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ',
                'available': False
            }), 500
    except Exception as e:
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è: {str(e)}',
            'available': False
        }), 500

@app.route('/api/bno055')
def api_bno055_data():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–∞ BNO055"""
    if not BNO055_MONITORING_AVAILABLE:
        return jsonify({
            'error': 'BNO055 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'available': False
        }), 503
    
    try:
        bno055_monitor = BNO055Monitor()
        data = bno055_monitor.get_sensor_data()
        return jsonify(data)
    except Exception as e:
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö BNO055: {str(e)}',
            'available': False
        }), 500

@app.route('/api/bno055/info')
def api_bno055_info():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç—á–∏–∫–µ BNO055"""
    if not BNO055_MONITORING_AVAILABLE:
        return jsonify({
            'error': 'BNO055 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'available': False
        }), 503
    
    try:
        bno055_monitor = BNO055Monitor()
        info = bno055_monitor.get_device_info()
        return jsonify(info)
    except Exception as e:
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ BNO055: {str(e)}',
            'available': False
        }), 500

@app.route('/api/bno055/calibration')
def api_bno055_calibration():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ BNO055"""
    if not BNO055_MONITORING_AVAILABLE:
        return jsonify({
            'error': 'BNO055 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'available': False
        }), 503
    
    try:
        bno055_monitor = BNO055Monitor()
        calibration = bno055_monitor.get_calibration_status()
        return jsonify(calibration)
    except Exception as e:
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ BNO055: {str(e)}',
            'available': False
        }), 500

@app.route('/api/bno055/mode')
def api_bno055_mode():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã BNO055"""
    if not BNO055_MONITORING_AVAILABLE:
        return jsonify({
            'error': 'BNO055 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            'available': False
        }), 503
    
    try:
        bno055_monitor = BNO055Monitor()
        mode = bno055_monitor.get_operation_mode()
        return jsonify(mode)
    except Exception as e:
        return jsonify({
            'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã BNO055: {str(e)}',
            'available': False
        }), 500

@app.route('/api/logs')
def api_logs():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥–∞
        log_file = "/home/shiwa-time/QuantumPCI-DRV/ptp-monitoring/monitoring.log"
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                recent_lines = lines[-100:] if len(lines) > 100 else lines
                return jsonify({
                    'logs': [line.strip() for line in recent_lines],
                    'total_lines': len(lines),
                    'recent_lines': len(recent_lines)
                })
        else:
            return jsonify({
                'logs': ['No log file found'],
                'total_lines': 0,
                'recent_lines': 0
            })
    except Exception as e:
        return jsonify({
            'error': f'Error reading logs: {str(e)}',
            'logs': []
        }), 500

@app.route('/api/export')
def api_export():
    """API –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        export_data = {
            'timestamp': time.time(),
            'devices': monitor.devices,
            'system_info': {
                'api_version': CONFIG['version'],
                'uptime': time.time() - monitor.start_time if hasattr(monitor, 'start_time') else 0
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º BMP280 –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if BMP280_MONITORING_AVAILABLE:
            try:
                export_data['bmp280'] = get_bmp280_data()
            except:
                pass
        
        return jsonify(export_data)
    except Exception as e:
        return jsonify({
            'error': f'Error exporting data: {str(e)}'
        }), 500

# === WebSocket Events ===

@socketio.on('connect')
def handle_connect():
    """–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è"""
    print('Client connected to realistic API')
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    status_data = {
        'connected': True,
        'devices_count': len(monitor.devices),
        'api_version': CONFIG['version'],
        'realistic_monitoring': True,
        'limitations_warning': '–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ ptp_ocp –¥—Ä–∞–π–≤–µ—Ä–∞',
        'timestamp': time.time()
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º PTP –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if monitor.devices:
        device = monitor.devices[0]
        ptp_data = monitor.get_ptp_metrics(device)
        status_data['current_offset'] = ptp_data.get('offset_ns', 0)
    
    # –î–æ–±–∞–≤–ª—è–µ–º BMP280 –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if BMP280_MONITORING_AVAILABLE:
        try:
            bmp280_data = get_bmp280_data()
            status_data['bmp280_available'] = bmp280_data.get('available', False)
            if bmp280_data.get('available'):
                status_data['bmp280_temperature'] = bmp280_data.get('temperature_c')
                status_data['bmp280_pressure'] = bmp280_data.get('pressure_hpa')
        except Exception as e:
            status_data['bmp280_error'] = str(e)
            status_data['bmp280_available'] = False
    else:
        status_data['bmp280_available'] = False
    
    socketio.emit('status_update', status_data)

@socketio.on('disconnect')
def handle_disconnect():
    """–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è"""
    print('Client disconnected')

if __name__ == '__main__':
    print("="*80)
    print("üöÄ Quantum-PCI REALISTIC Monitoring API v2.0")
    print("="*80)
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ ptp_ocp –¥—Ä–∞–π–≤–µ—Ä–∞")
    print("")
    print("‚úÖ –î–û–°–¢–£–ü–ù–´–ï –º–µ—Ç—Ä–∏–∫–∏:")
    print("   üìä PTP offset/drift –∏–∑ sysfs")
    print("   üõ∞Ô∏è  GNSS sync —Å—Ç–∞—Ç—É—Å")
    print("   üîå SMA –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    print("   üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ")
    print("")
    print("‚ùå –ù–ï –î–û–°–¢–£–ü–ù–´–ï –º–µ—Ç—Ä–∏–∫–∏:")
    print("   üå°Ô∏è  –î–µ—Ç–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
    print("   ‚ö° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∏—Ç–∞–Ω–∏—è –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–π")
    print("   üõ∞Ô∏è  –î–µ—Ç–∞–ª—å–Ω—ã–π GNSS (—Å–ø—É—Ç–Ω–∏–∫–∏, –∫–∞—á–µ—Å—Ç–≤–æ)")
    print("   üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ LED/FPGA/–∞–ø–ø–∞—Ä–∞—Ç—É—Ä—ã")
    print("="*80)
    print(f"üìä Realistic Dashboard: http://localhost:8080/realistic-dashboard")
    print(f"üîß API: http://localhost:8080/api/")
    print(f"üó∫Ô∏è  Roadmap: http://localhost:8080/api/roadmap")
    print("="*80)
    print(f"üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(monitor.devices)}")
    for device in monitor.devices:
        print(f"   üïê {device['id']}: {device.get('serial', 'N/A')}")
    print("="*80)
    
    socketio.run(app, host='0.0.0.0', port=CONFIG['server']['port'], debug=False)
