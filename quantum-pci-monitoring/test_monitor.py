#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ quantum-pci-monitor.py
"""

import sys
import os
import importlib.util
from pathlib import Path

def test_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ API –º–æ–¥—É–ª—è–º
        api_path = Path(__file__).parent / 'api'
        sys.path.insert(0, str(api_path))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç API –º–æ–¥—É–ª—è
        realistic_api_path = api_path / 'quantum-pci-realistic-api.py'
        
        if realistic_api_path.exists():
            print("‚úÖ quantum-pci-realistic-api.py –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
            spec = importlib.util.spec_from_file_location("quantum_pci_realistic_api", str(realistic_api_path))
            quantum_pci_api = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(quantum_pci_api)
            
            print("‚úÖ API –º–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if hasattr(quantum_pci_api, 'app'):
                print("‚úÖ Flask app –Ω–∞–π–¥–µ–Ω")
            else:
                print("‚ùå Flask app –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
            if hasattr(quantum_pci_api, 'socketio'):
                print("‚úÖ SocketIO –Ω–∞–π–¥–µ–Ω")
            else:
                print("‚ùå SocketIO –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if hasattr(quantum_pci_api, 'CONFIG'):
                config = quantum_pci_api.CONFIG
                print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: –≤–µ—Ä—Å–∏—è {config.get('version', 'N/A')}")
            else:
                print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
            return True
            
        else:
            print("‚ùå quantum-pci-realistic-api.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_dependencies():
    """–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_modules = [
        'flask',
        'flask_socketio', 
        'flask_cors',
        'subprocess',
        'threading',
        'pathlib'
    ]
    
    missing_modules = []
    
    for module in required_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module} –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            print(f"‚ùå {module} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            missing_modules.append(module)
    
    return len(missing_modules) == 0

def test_files():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    required_files = [
        'quantum-pci-monitor.py',
        'api/quantum-pci-realistic-api.py',
        'api/realistic-dashboard.html',
        'requirements.txt'
    ]
    
    missing_files = []
    
    for file_path in required_files:
        full_path = Path(__file__).parent / file_path
        if full_path.exists():
            print(f"‚úÖ {file_path} –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            missing_files.append(file_path)
    
    return len(missing_files) == 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("="*60)
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Quantum-PCI Monitor")
    print("="*60)
    
    tests = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤", test_files),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", test_dependencies),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞", test_import)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        print("-" * 40)
        
        try:
            result = test_func()
            if result:
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "="*60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É.")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É.")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
