#!/usr/bin/env python3
"""
LED Monitor –¥–ª—è TimeCard
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞–º–∏ IS32FL3207 —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import subprocess
import time
import json
import os
from datetime import datetime

class LEDMonitor:
    def __init__(self, bus=1, addr=0x37):
        self.bus = bus
        self.addr = addr
        self.pwm_regs = [0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 
                         0x11, 0x13, 0x15, 0x17, 0x19, 0x1B, 0x1D, 0x1F, 
                         0x21, 0x23]
        self.led_names = {
            0: "Power", 1: "Sync", 2: "GNSS", 3: "Alarm",
            4: "Status1", 5: "Status2", 6: "Status3", 7: "Status4",
            8: "Debug1", 9: "Debug2", 10: "Debug3", 11: "Debug4",
            12: "Info1", 13: "Info2", 14: "Info3", 15: "Info4",
            16: "Test1", 17: "Test2"
        }
        
    def check_i2c_device(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è IS32FL3207"""
        try:
            result = subprocess.run(['sudo', 'i2cdetect', '-y', str(self.bus)], 
                                  capture_output=True, text=True)
            # –ò—â–µ–º –∞–¥—Ä–µ—Å 37 –≤ –≤—ã–≤–æ–¥–µ i2cdetect
            return "37" in result.stdout
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ I2C: {e}")
            return False
    
    def init_led_controller(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LED –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        try:
            # –í–∫–ª—é—á–µ–Ω–∏–µ —á–∏–ø–∞
            subprocess.run(['sudo', 'i2cset', '-y', str(self.bus), f'0x{self.addr:02x}', '0x00', '0x01'])
            
            # Global Current Control
            subprocess.run(['sudo', 'i2cset', '-y', str(self.bus), f'0x{self.addr:02x}', '0x6E', '0xFF'])
            
            # Scaling —Ä–µ–≥–∏—Å—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
            for reg in range(74, 92):
                subprocess.run(['sudo', 'i2cset', '-y', str(self.bus), f'0x{self.addr:02x}', f'0x{reg:02x}', '0xFF'])
            
            print("‚úÖ LED –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def read_led_status(self, led_index):
        """–ß—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ LED"""
        try:
            reg = self.pwm_regs[led_index]
            result = subprocess.run(['sudo', 'i2cget', '-y', str(self.bus), f'0x{self.addr:02x}', f'0x{reg:02x}'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                return int(result.stdout.strip(), 16)
            return 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è LED {led_index}: {e}")
            return 0
    
    def set_led_brightness(self, led_index, brightness):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è—Ä–∫–æ—Å—Ç–∏ LED"""
        try:
            reg = self.pwm_regs[led_index]
            subprocess.run(['sudo', 'i2cset', '-y', str(self.bus), f'0x{self.addr:02x}', f'0x{reg:02x}', f'0x{brightness:02x}'])
            subprocess.run(['sudo', 'i2cset', '-y', str(self.bus), f'0x{self.addr:02x}', '0x49', '0x00'])
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ LED {led_index}: {e}")
            return False
    
    def turn_off_all_leds(self):
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö LED"""
        for i in range(18):
            self.set_led_brightness(i, 0)
    
    def get_all_led_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö LED"""
        status = {}
        for i in range(18):
            brightness = self.read_led_status(i)
            led_name = self.led_names.get(i, f"LED{i+1}")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if brightness == 0:
                state = "off"
            elif brightness >= 0xE0:
                state = "bright"
            elif brightness >= 0x80:
                state = "medium"
            elif brightness >= 0x40:
                state = "dim"
            else:
                state = "very_dim"
            
            status[led_name] = {
                "brightness": brightness,
                "state": state,
                "percentage": int((brightness / 255) * 100)
            }
        
        return status
    
    def set_led_pattern(self, pattern_name):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ LED"""
        patterns = {
            "all_off": lambda: [self.set_led_brightness(i, 0) for i in range(18)],
            "all_on": lambda: [self.set_led_brightness(i, 0xFF) for i in range(18)],
            "power_on": lambda: [
                self.set_led_brightness(0, 0xFF),  # Power LED
                self.set_led_brightness(1, 0x80),  # Sync LED
                self.set_led_brightness(2, 0x80),  # GNSS LED
                self.set_led_brightness(3, 0x00)   # Alarm LED
            ],
            "error": lambda: [
                self.set_led_brightness(0, 0xFF),  # Power LED
                self.set_led_brightness(1, 0x00),  # Sync LED
                self.set_led_brightness(2, 0x00),  # GNSS LED
                self.set_led_brightness(3, 0xFF)   # Alarm LED
            ],
            "warning": lambda: [
                self.set_led_brightness(0, 0xFF),  # Power LED
                self.set_led_brightness(1, 0x80),  # Sync LED
                self.set_led_brightness(2, 0x40),  # GNSS LED
                self.set_led_brightness(3, 0x80)   # Alarm LED
            ],
            "test": lambda: [
                self.set_led_brightness(i, 0x80 if i % 2 == 0 else 0x00) for i in range(18)
            ]
        }
        
        if pattern_name in patterns:
            patterns[pattern_name]()
            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern_name}")
            return True
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern_name}")
            return False
    
    def export_metrics(self, filename=None):
        """–≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ LED –≤ JSON"""
        status = self.get_all_led_status()
        metrics = {
            "timestamp": datetime.now().isoformat(),
            "device": "TimeCard LED Controller",
            "i2c_bus": self.bus,
            "i2c_addr": f"0x{self.addr:02x}",
            "leds": status,
            "summary": {
                "total_leds": 18,
                "active_leds": sum(1 for led in status.values() if led["brightness"] > 0),
                "average_brightness": sum(led["brightness"] for led in status.values()) // 18
            }
        }
        
        if filename:
            with open(filename, 'w') as f:
                json.dump(metrics, f, indent=2)
            print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        
        return metrics

def main():
    print("=== LED Monitor –¥–ª—è TimeCard ===")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ TimeCard
    timecard_sysfs = "/sys/class/timecard/ocp0"
    if os.path.exists(timecard_sysfs):
        serial = open(f"{timecard_sysfs}/serialnum").read().strip()
        print(f"‚úÖ TimeCard –Ω–∞–π–¥–µ–Ω: {serial}")
    else:
        print("‚ùå TimeCard –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞
    monitor = LEDMonitor()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ I2C —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if not monitor.check_i2c_device():
        print("‚ùå IS32FL3207 –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print("‚úÖ IS32FL3207 –Ω–∞–π–¥–µ–Ω")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if not monitor.init_led_controller():
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        return
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    print("\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π:")
    
    # 1. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    print("\n1. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö LED:")
    status = monitor.get_all_led_status()
    for name, info in status.items():
        print(f"   {name}: {info['state']} ({info['percentage']}%)")
    
    # 2. –¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    print("\n2. –¢–µ—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ LED:")
    patterns = ["all_off", "power_on", "warning", "error", "test", "all_off"]
    
    for pattern in patterns:
        print(f"   –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {pattern}")
        monitor.set_led_pattern(pattern)
        time.sleep(1)
    
    # 3. –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫
    print("\n3. –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫:")
    metrics = monitor.export_metrics("led_metrics.json")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö LED: {metrics['summary']['active_leds']}")
    print(f"   –°—Ä–µ–¥–Ω—è—è —è—Ä–∫–æ—Å—Ç—å: {metrics['summary']['average_brightness']}")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    # –í—ã–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö LED
    print("\nüîö –í—ã–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö LED...")
    for i in range(18):
        monitor.set_led_brightness(i, 0)
    
    print("‚úÖ –í—Å–µ LED –≤—ã–∫–ª—é—á–µ–Ω—ã")
    print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main() 